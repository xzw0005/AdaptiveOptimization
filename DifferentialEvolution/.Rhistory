S = 100
K = 120
sigma = .55
r = .06
tau = 3/12
d1 = (log(S/K) + (r + sigma^2 / 2) * tau) / (sigma * sqrt(tau))
d2 = d1 - sigma * sqrt(tau)
call = pnorm(d1) * S - pnorm(d2) * K * exp(-r * tau)
put = pnorm(-d2) * K * exp(-r * tau) - pnorm(-d1) * S
c(call, put)
S = 80
K = 100
sigma = .35
r = .04
tau = 3/12
d1 = (log(S/K) + (r + sigma^2 / 2) * tau) / (sigma * sqrt(tau))
d2 = d1 - sigma * sqrt(tau)
call = pnorm(d1) * S - pnorm(d2) * K * exp(-r * tau)
put = pnorm(-d2) * K * exp(-r * tau) - pnorm(-d1) * S
c(call, put)
S = 70.5
K = 72
sigma = .75
r = .04
tau = 2/12
d1 = (log(S/K) + (r + sigma^2 / 2) * tau) / (sigma * sqrt(tau))
d2 = d1 - sigma * sqrt(tau)
call = pnorm(d1) * S - pnorm(d2) * K * exp(-r * tau)
put = pnorm(-d2) * K * exp(-r * tau) - pnorm(-d1) * S
c(call, put)
S = 70.5
K = 72
sigma = .6
r = .09
tau = 3/12
d1 = (log(S/K) + (r + sigma^2 / 2) * tau) / (sigma * sqrt(tau))
d2 = d1 - sigma * sqrt(tau)
call = pnorm(d1) * S - pnorm(d2) * K * exp(-r * tau)
put = pnorm(-d2) * K * exp(-r * tau) - pnorm(-d1) * S
c(call, put)
S = 90
K = 110
sigma = .3
r = .07
tau = 9/12
d1 = (log(S/K) + (r + sigma^2 / 2) * tau) / (sigma * sqrt(tau))
d2 = d1 - sigma * sqrt(tau)
call = pnorm(d1) * S - pnorm(d2) * K * exp(-r * tau)
put = pnorm(-d2) * K * exp(-r * tau) - pnorm(-d1) * S
c(call, put)
S = 2.5
K = 2.7
sigma = .45
r = .11
tau = 12/12
d1 = (log(S/K) + (r + sigma^2 / 2) * tau) / (sigma * sqrt(tau))
d2 = d1 - sigma * sqrt(tau)
call = pnorm(d1) * S - pnorm(d2) * K * exp(-r * tau)
put = pnorm(-d2) * K * exp(-r * tau) - pnorm(-d1) * S
c(call, put)
1203-1104
99*1.5
S = 148.5
K = 128
sigma = .2
r = .05
tau = 36/12
d1 = (log(S/K) + (r + sigma^2 / 2) * tau) / (sigma * sqrt(tau))
d2 = d1 - sigma * sqrt(tau)
call = pnorm(d1) * S - pnorm(d2) * K * exp(-r * tau)
put = pnorm(-d2) * K * exp(-r * tau) - pnorm(-d1) * S
c(call, put)
S = 2.6
K = 2.7
sigma = .49
r = .1
tau = 12/12
d1 = (log(S/K) + (r + sigma^2 / 2) * tau) / (sigma * sqrt(tau))
d2 = d1 - sigma * sqrt(tau)
call = pnorm(d1) * S - pnorm(d2) * K * exp(-r * tau)
put = pnorm(-d2) * K * exp(-r * tau) - pnorm(-d1) * S
c(call, put)
(1227-1115)*1.7
S = 190.4
K = 148
sigma = .2
r = .04
tau = 36/12
d1 = (log(S/K) + (r + sigma^2 / 2) * tau) / (sigma * sqrt(tau))
d2 = d1 - sigma * sqrt(tau)
call = pnorm(d1) * S - pnorm(d2) * K * exp(-r * tau)
put = pnorm(-d2) * K * exp(-r * tau) - pnorm(-d1) * S
c(call, put)
BlackScholes = function(S, K, sigma, rf, tau, optionType = "call") {
d1 = (log(S/K) + (rf + sigma^2 / 2) * tau) / (sigma * sqrt(tau))
d2 = d1 - sigma * sqrt(tau)
call = pnorm(d1) * S - pnorm(d2) * K * exp(-rf * tau)
put = pnorm(-d2) * K * exp(-rf * tau) - pnorm(-d1) * S
if (optionType == "call"){
return(call)
}
else if (optionType == "put"){
return(put)
}
}
S = 190.4
K = 148
sigma = .2
rf = .04
tau = 36/12
print(BlackScholes(S, K, sigma, rf, tau, "call"))
print(BlackScholes(S, K, sigma, rf, tau, "put"))
BlackScholes = function(S, K, sigma, rf, tau, optionType = "call") {
d1 = (log(S/K) + (rf + sigma^2 / 2) * tau) / (sigma * sqrt(tau))
d2 = d1 - sigma * sqrt(tau)
call = pnorm(d1) * S - pnorm(d2) * K * exp(-rf * tau)
#put = pnorm(-d2) * K * exp(-rf * tau) - pnorm(-d1) * S
if (optionType == "call"){
return(call)
}
else if (optionType == "put"){
put = K * exp(-rf * tau) - S + call
return(put)
}
}
print(BlackScholes(S, K, sigma, rf, tau, "put"))
print(BlackScholes(S, K, sigma, rf, tau, "call"))
S = 30*1.2
K = 60*1.2
sigma = .5
rf = .06
tau = 36/12
print(BlackScholes(S, K, sigma, rf, tau, "call"))
shiny::runApp('D:/@Auburn/2016Spring/INSY7970_DataVisualization/projects/DataVisualizationProject')
shiny::runApp('D:/@Auburn/2016Spring/INSY7970_DataVisualization/projects/DataVisualizationProject')
shiny::runApp('D:/@Auburn/2016Spring/INSY7970_DataVisualization/projects/DataVisualizationProject')
shiny::runApp('D:/@Auburn/2016Spring/INSY7970_DataVisualization/projects/DataVisualizationProject')
shiny::runApp('D:/@Auburn/2016Spring/INSY7970_DataVisualization/projects/DataVisualizationProject')
shiny::runApp('D:/@Auburn/2016Spring/INSY7970_DataVisualization/projects/DataVisualizationProject')
F2P = function(n, r = .09) {
return(1/(1+r)^n)
}
2100*A2P2 + 3300*A2P3 * F2P(2) + 3300 * A2P3 * F2P(5) + 4130 * A2P2 * F2P(8)
A2P1 =.9174
A2P2 = 1.7591
A2P3 = 2.5313
A2P4 = 3.2397
F2P = function(n, r = .09) {
return(1/(1+r)^n)
}
2100*A2P2 + 3300*A2P3 * F2P(2) + 3300 * A2P3 * F2P(5) + 4130 * A2P2 * F2P(8)
2100*A2P2 + 3300*A2P3 * F2P(2) + 3300 * A2P3 * F2P(5) + 4130 * A2P2 * F2P(8)
3000*A2P1 + 3300*A2P3 * F2P(1) + 3300 * A2P3 * F2P(4) + 3300 * A2P3 * F2P(7)
2250*A2P3 + 3300*A2P3 * F2P(3) + 3300 * A2P3 * F2P(6) + 5300 * A2P1 * F2P(9)
2250*A2P3 + 3300*A2P3 * F2P(3) + 3500 * A2P4 * F2P(6)
3100*A2P4 + 3300*A2P3 * F2P(4) + 3300 * A2P3 * F2P(7)
print(A2P(1))
A2P = function(n, r = .14) {
cpn = (1+r)^n
return((cpn-1)/(r*cpn))
}
print(A2P(1))
print(A2P(2))
print(A2P(3))
2500*A2P(2) + 3800*A2P(3) * F2P(2) + 3800 * A2P(3) * F2P(5) + 4130 * A2P(2) * F2P(8)
3200*A2P(1) + 3800*A2P(3) * F2P(1) + 3800 * A2P(3) * F2P(4) + 3800 * A2P(3) * F2P(7)
2750*A2P(3) + 3800*A2P(3) * F2P(3) + 3800 * A2P(3) * F2P(6) + 5800 * A2P(1) * F2P(9)
2750*A2P(3) + 3800*A2P(3) * F2P(3) + 4000 * A2P(4) * F2P(6)
3300*A2P(4) + 3800*A2P(3) * F2P(4) + 3800 * A2P(3) * F2P(7)
d2*A2P(2) + c3 * A2P(3) * F2P(2) + c3 * A2P(3) * F2P(5) + c2 * A2P(2) * F2P(8)
d1*A2P(1) + c3*A2P(3) * F2P(1) + c3 * A2P(3) * F2P(4) + c3 * A2P(3) * F2P(7)
d3*A2P(3) + c3*A2P(3) * F2P(3) + c3 * A2P(3) * F2P(6) + c1 * A2P(1) * F2P(9)
d3*A2P(3) + c3*A2P(3) * F2P(3) + c4 * A2P(4) * F2P(6)
d4*A2P(4) + c3*A2P(3) * F2P(4) + c3 * A2P(3) * F2P(7)
d1 = 3200; d2 = 2500; d3 = 2750; d4 = 3300
c1 = 5800; c2 = 4130; c3 = 3800; c4 = 4000; c5 = 4500; c6 = 6000
d2*A2P(2) + c3 * A2P(3) * F2P(2) + c3 * A2P(3) * F2P(5) + c2 * A2P(2) * F2P(8)
d1*A2P(1) + c3*A2P(3) * F2P(1) + c3 * A2P(3) * F2P(4) + c3 * A2P(3) * F2P(7)
d3*A2P(3) + c3*A2P(3) * F2P(3) + c3 * A2P(3) * F2P(6) + c1 * A2P(1) * F2P(9)
d3*A2P(3) + c3*A2P(3) * F2P(3) + c4 * A2P(4) * F2P(6)
d4*A2P(4) + c3*A2P(3) * F2P(4) + c3 * A2P(3) * F2P(7)
A2P = function(n, r = .11) {
cpn = (1+r)^n
return((cpn-1)/(r*cpn))
}
print(A2P(3))
F2P = function(n, r = .11) {
return(1/(1+r)^n)
}
d1 = 3100; d2 = 2400; d3 = 2750; d4 = 3400
c1 = 5700; c2 = 4330; c3 = 3300; c4 = 3500; c5 = 4000; c6 = 5500
d2*A2P(2) + c3 * A2P(3) * F2P(2) + c3 * A2P(3) * F2P(5) + c2 * A2P(2) * F2P(8)
d1*A2P(1) + c3*A2P(3) * F2P(1) + c3 * A2P(3) * F2P(4) + c3 * A2P(3) * F2P(7)
d3*A2P(3) + c3*A2P(3) * F2P(3) + c3 * A2P(3) * F2P(6) + c1 * A2P(1) * F2P(9)
d3*A2P(3) + c3*A2P(3) * F2P(3) + c4 * A2P(4) * F2P(6)
d4*A2P(4) + c3*A2P(3) * F2P(4) + c3 * A2P(3) * F2P(7)
7000*.2714-1000*.1114+2400
22000*.1924-500*.0324+1200
22000*.1924-500*.0324+1200 -4188
22000*.1924-500*.0324+1200 -4188.4
A2P = function(n, r = .12) {
cpn = (1+r)^n
return((cpn-1)/(r*cpn))
}
print(A2P(3))
F2P = function(n, r = .12) {
return(1/(1+r)^n)
}
d1 = 3300; d2 = 2500; d3 = 2750; d4 = 3500
c1 = 5700; c2 = 4130; c3 = 2900; c4 = 3200; c5 = 3700; c6 = 4700
d2*A2P(2) + c3 * A2P(3) * F2P(2) + c3 * A2P(3) * F2P(5) + c2 * A2P(2) * F2P(8)
d1*A2P(1) + c3*A2P(3) * F2P(1) + c3 * A2P(3) * F2P(4) + c3 * A2P(3) * F2P(7)
d3*A2P(3) + c3*A2P(3) * F2P(3) + c3 * A2P(3) * F2P(6) + c1 * A2P(1) * F2P(9)
d3*A2P(3) + c3*A2P(3) * F2P(3) + c4 * A2P(4) * F2P(6)
d4*A2P(4) + c3*A2P(3) * F2P(4) + c3 * A2P(3) * F2P(7)
3600+5760+3456+1500
12000+1500
(6000-2500/1.15^2 + 2800/1.15 + 3300/1.15^2) * .6151
(7500-2500/1.15^2 + 2800/1.15 + 3300/1.15^2) * .6151
(7500 + 2800/1.15 + 3300/1.15^2 + 3500/1.15^3 + 4500/1.15^4 + 5100/1.15^5) * .2983
(7500 + 2800/1.15 + 3300/1.15^2 + 3500/1.15^3 + 4500/1.15^4 + 5100/1.15^5 + 6000/1.15^5) * .2983
(30000-3500*.2946)*.1843 + 800
10000-1000*.2983-7000
11500-12000*.2983+2000*.1483-5000
(11500-12000*.2983+2000*.1483-5000-2701.7)/.2983
(11500+2000*.1483-5000-2701.7)/.2983
16000-3200-520-3072
16000-3200-520-3072-6500
16000-3200-5120-3072-6500
(16000-3200-5120-3072-6500)
.4*(16000-3200-5120-3072-6500)
6500-756.8
16000-3200-5120-3072
.4*(6500-(16000-3200-5120-3072))
6500-.4*(6500-(16000-3200-5120-3072))
6500-.4*(6500-(16000-3200-5120-3072/2))
-6358-.6*1800
-3000*.6+.4*1843
-3300*.6+.4*1843+4000-.4*(4000-(6358-1843-1843))
-7438-1062.8/1.08+2226/1.08**2
-5904 -1500*.6
-3000*.6 +.4*1728
1728*.4
3000-(5904-1728-1728)
.4(3000-(5904-1728-1728))
.4*(3000-(5904-1728-1728))
.4*(3000-(5904-1728))
1728*.4 +
-.4*(3000-(5904-1728-1728))
1728*.4
1728*.4 -.4*(3000-(5904-1728-1728))
-.6*(3000-(5904-1728-1728))
-3500*.6
+3000-.6*(3000-(5904-1728-1728))
+3000-.4*(3000-(5904-1728-1728))
+3000-.4*(3000-(6000-1728-1728))
log(1.1/.9)
log(1.1/.9) / 2 * 3.1
log(1/.9) / 2 * 3.1
log(1/.8) / 2 * 3.1
rnorm(1)
rnorm(100)
shiny::runApp('D:/@Auburn/2016Spring/INSY7970_DataVisualization/projects/DataVisualizationProject')
19.8/30
20/30
15/30
23.6/30
10000000/(28*.94)
shiny::runApp('D:/@Auburn/2016Spring/INSY7970_DataVisualization/projects/DataVisualizationProject')
computeLattice = function(sO, x, r, sigma, tau, n) {
# Initialize variables
dt = tau / n
R = exp(r * dt)
u = exp(sigma * sqrt(dt))
d = 1.0 / u
qu = (R - d) / (u - d)
qd = (u - R) / (u - d)
S = matrix(data = NA, nrow = n + 1, ncol = n + 1)
#S[n, n] = s0 * d^n
#     for (j in 1:n + 1) {
#         for (i in n + 1:j) {
#             S[i, j] = 12345
#         }
#     }
for (j in 1:n+1) {
#for (i in 1:j) {
for (i in n+2-j : n+1) {
#id = i - 1
#iu = j - i
iu = n+1-i
id = (j-1) - (n+1-i)
S[i, j] = (u^iu) * (d^id)
}
}
return(S)
}
try0 = computeLattice(1, 1, .05, .2, 4, 4)
print(try0)
try0[3,2]
length(S)
computeLattice = function(sO, x, r, sigma, tau, n) {
# Initialize variables
dt = tau / n
R = exp(r * dt)
u = exp(sigma * sqrt(dt))
d = 1.0 / u
qu = (R - d) / (u - d)
qd = (u - R) / (u - d)
S = matrix(data = NA, nrow = n + 1, ncol = n + 1)
#S[n, n] = s0 * d^n
#     for (j in 1:n + 1) {
#         for (i in n + 1:j) {
#             S[i, j] = 12345
#         }
#     }
for (j in 1:nrow(S)) {
aaa = nrow(S) - j + 1
#for (i in 1:j) {
for (i in aaa : nrow(S)) {
#id = i - 1
#iu = j - i
iu = n+1-i
id = (j-1) - (n+1-i)
S[i, j] = (u^iu) * (d^id)
}
}
return(S)
}
try0 = computeLattice(1, 1, .05, .2, 4, 4)
print(try0)
try0[3,2]
#     #Initialize Asset Prices at Maturity (i.e., period M)
#     VM = pmax(SM - K, 0)
#     for (i in seq(M-1, 0, by = -1)) {
#         V = (1.0 / R) * (qu * )
#     }
dim(c(1,2))
dim(matrix(c(1,2), 2, 1))
computeLattice = function(sO, x, r, sigma, tau, n) {
# Initialize variables
dt = tau / n
R = exp(r * dt)
u = exp(sigma * sqrt(dt))
d = 1.0 / u
qu = (R - d) / (u - d)
qd = (u - R) / (u - d)
latticeDim = n + 1
S = matrix(data = NA, nrow = latticeDim, ncol = latticeDim)
#S[n, n] = s0 * d^n
#     for (j in 1:n + 1) {
#         for (i in n + 1:j) {
#             S[i, j] = 12345
#         }
#     }
for (j in 1:latticeDim) {
temp = nrow(S) - j + 1
for (i in temp : latticeDim) {
#id = i - 1
#iu = j - i
iu = n+1-i
id = (j-1) - (n+1-i)
S[i, j] = (u^iu) * (d^id)
}
}
return(S)
}
try0 = computeLattice(1, 1, .05, .2, 4, 4)
print(try0)
try0[3,2]
computeLattice = function(sO, x, r, sigma, tau, n) {
# Initialize variables
dt = tau / n
R = exp(r * dt)
u = exp(sigma * sqrt(dt))
d = 1.0 / u
qu = (R - d) / (u - d)
qd = (u - R) / (u - d)
latticeDim = n + 1
S = matrix(data = NA, nrow = latticeDim, ncol = latticeDim)
for (j in 1:latticeDim) {
temp = nrow(S) - j + 1
for (i in temp : latticeDim) {
#id = i - 1
#iu = j - i
iu = n+1-i
id = (j-1) - (n+1-i)
S[i, j] = (u^iu) * (d^id)
}
}
return(S)
}
try0 = computeLattice(1, 1, .05, .2, 4, 4)
print(try0)
16*10^6 /(1-.06) /45
16*10^6 /(1-.06) * .06
16*10^6 /(1-.015) / 1000
16*10^6 /(1-.015) * .015
16*10^6 /(1-.015) * .13
6*10^6 /(1-.09) /10
6*10^6 /(1-.09) * .09
6*10^6 /(1-.024) * .024
6*10^6 /(1-.024) / 1000
6*10^6 /(1-.024) * .10
5/40
5/(40*(1-.124))
9/(95*.94)
.167*.205+.666*.2227+.167*.1008
.06+1.99*.07
.09*.74
110/.14
.14*.73
.11*.82
13*.64
.14*.6
.1*.69
80+50+21+17
31+50+21+17
31+50+21+17+27
.12*.79
.13*.64
.14*.6
shiny::runApp('D:/@Auburn/2016Spring/INSY7970_DataVisualization/projects/DataVisualizationProject')
.2*(1-2.65)^2+.25*(2-2.65)^2+.25*(3-2.65)^2+.3*(4-2.65)^2
.05/.35+2*.1/.35+3*.1/.35+4*.1/.35
.75**3-.25**3
.40625*.4
.40625*.4+.3
//
9/3.6
pnorm(2.5)
300**2+(3.2*80)**2+(3.4*50)**2
(4500-5620)/sqrt(184436)
pnorm(-2.608)
sqrt(184436)
40/sqrt(48)
pnorm(5.77)
sqrt(40)/1.2
8/sqrt(40)
6/sqrt(35)
64/40+36/35
sqrt(64/40+36/35)
library(manipulate)
install.packages("manipulate")
library(manipulate)
manipulate(plot(1:x), x = slider(1, 100))
manipulate(hist(x), x = slider(1, 100))
manipulate(hist(rnorm(x)), x = slider(1, 100))
data(galton)
library(manipulate)
myHist = function(mu) {
hist(galton$child, col = "blue", breaks = 100)
lines(c(mu, mu), c(0, 150), col = "red", lwd = 5)
mse = mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = .5))
data(Galton)
library(UsingR)
install.packages("UsingR")
library(UsingR)
myHist = function(mu) {
hist(galton$child, col = "blue", breaks = 100)
lines(c(mu, mu), c(0, 150), col = "red", lwd = 5)
mse = mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = .5))
galton
manipulate(myHist(mu), mu = slider(62, 74, step = .5))
manipulate(myHist(mu), mu = slider(62, 74, step = .5))
require(rCharts)
installed.packages("rCharts")
intall_github(rCharts)
library(devtools)
intall_github(rCharts)
ls(dev_packages())
ls(dev_packages
)
setwd("D:/@Auburn/2016Fall/COMP6600/HW2//")
data = read.table("B.txt")
data[2]
d = dist(data)
hc = hclust(d, method="single")
plot(hc)
groups = cutree(hc, k = 2)
table(groups)
library(ggplot2)
df = data.frame(data[1]=x, data[2]=y, groups)
df = data.frame(data[1], data[2], groups)
names(df) = c('x', 'y', 'label')
df
qplot(x, y, color=label, data=df)
plot(x, y, data=df)
plot(data$x, data$y)
scatterplot(data$x, data$y)
plot(data$x, data$y)
qplot(x, y, color=label, data=df)
table(groups)
setwd("C:/Users/XING/workspace/AdaptiveOptimization/DifferentialEvolution/")
rand1 = read.table("rand1.txt", head=F)
rand1 = read.csv("rand1.txt", head=F)
rand1 = read.csv("rand1.txt")
rand1
rand1 = read.csv("rand1.txt", header = FALSE)
rand1
rand1 = read.table("rand1.txt", header = FALSE)
rand1
rand2 = read.table("rand2.txt", header = FALSE)
rand2
t.test(rand1, rand2)
